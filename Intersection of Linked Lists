Intersection of Linked Lists

Easy
40/40
Average time to solve is 20m

Problem statement

You are given two linked lists L1 and L2 which are sorted in ascending order. You have to make a linked list with the elements which are present in both the linked lists and are present in ascending order.

Example:-
L1 = 1->2->3->4->7
L2 = 2->4->6->7

ANSWER:- The answer should be 2->4->7 because 2,4, and 7 are present in both the linked lists.

Constraints :
1 <= T <= 5
1 <= Length of the the two linked lists <= 10^5 

Time Limit = 1 sec

Sample Input 1 :
2
1 3 5 -1
1 2 4 -1
2 3 -1
2 3 4 -1
Sample Output 1 :
1 -1
2 3 -1
Explanation for Sample Output 1 :
In the first test case, the intersecting linked list is 1, so the node containing 1 is returned.

In the second test case, the intersecting linked list is 2->3, so the node containing 2 is returned.

Sample Input 2 :
1
2 3 4 -1
1 5 6 -1
Sample Output 2 :
-1 

cpp code:
#include <bits/stdc++.h> 
/************************************************************

    Following is the linkedList class structure:

    class Node {
    public:
        int data;
        Node *next;

        Node(int val) {
            this->data = val;
            next = NULL;
        }
        ~Node() {
            if (next != NULL) {
                delete next;
            }
        }
};

************************************************************/
      
Node* intersect_ll(Node* L1, Node *L2){

    // Write your code here.
    Node* curr1 = L1;
    Node* curr2 = L2;
    Node* ans = new Node(-1);
    Node* curr = ans;
    while(curr1!=NULL&&curr2!=NULL){
        if(curr1->data==curr2->data){
            curr->next = new Node(curr1->data);
            curr = curr->next;
            curr1=curr1->next;
            curr2=curr2->next;
        }else if(curr1->data<curr2->data){
            curr1=curr1->next;
        }else{
            curr2=curr2->next;
        }
    }
    return ans->next;
}
