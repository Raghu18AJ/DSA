Linked List Group Reverse

Difficulty: Hard
Accuracy: 57.08%
Submissions: 258K+
Points: 8
Average Time: 30m

You are given the head of a Singly linked list. You have to reverse every k node in the linked list and return the head of the modified list.
Note: If the number of nodes is not a multiple of k then the left-out nodes at the end, should be considered as a group and must be reversed.

Examples:

Input: k = 2,
   
Output: 2 -> 1 -> 4 -> 3 -> 6 -> 5

Explanation: Linked List is reversed in a group of size k = 2.
   
Input: k = 4,
   
Output: 4 -> 3 -> 2 -> 1 -> 6 -> 5

Explanation: Linked List is reversed in a group of size k = 4.
   
Constraints:
1 ≤ size of linked list ≤ 105
0 ≤ node->data ≤ 106
1 ≤ k ≤ size of linked list 

cpp code:
/*
class Node {
  public:
    int data;
    Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};
*/
class Solution {
  public:
    Node *reverseKGroup(Node *head, int k) {
        // code here
        if(k == 1){
            return head;
        }
        stack<int> s;
        vector<int> arr;
        while(head!=NULL){
            if(s.size()==k){
                while(!s.empty()){
                    arr.push_back(s.top());
                    s.pop();
                }
            }
            s.push(head->data);
            head=head->next;
        }
        while(!s.empty()){
            arr.push_back(s.top());
            s.pop();
        }
        Node* ans = new Node(-1);
        Node* curr = ans;
        for(int i = 0;i<arr.size();i++){
            curr->next = new Node(arr[i]);
            curr = curr->next;
        }
        return ans->next;
    }
};
