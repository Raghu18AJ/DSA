Flip given bits
Easy
40/40
Average time to solve is 15m

Problem statement

You have been given an integer 'NUM' (32 bits) and an array of size 'N'.

Your task is to flip all the bits of 'NUM' at position 'ARR[i]' where 0<= i <= N-1.

Constraints:
1 <= 'T' <= 10
1 <= 'NUM' <= 10^9
1 <= 'N' <= 10^5
1 <= 'ARR[i]' <= 31

Time Limit: 1 sec
Sample Input 1:
2
21
3
4 2 1
40
1
4
Sample Output 1:
30
32
Explanation for Sample Input 1:
Before flipping
21 => 10101
After flipping the 4th, 2nd and 1st bit from the end we get 
30 => 11110

Before flipping
40 => 101000
After flipping the 4th bit from the end we get 
32 => 100000
Sample Input 2:
1
5
3
6 2 5
Sample Output 2:
55

cpp code:

#include <bits/stdc++.h> 
int flipSomeBits(int num, vector<int> &arr, int n)
{
	// Write your code here.
	vector<int> temp(32);
	int ind = 0;
	while(num>0){
		temp[ind]=num%2;
		num /=2;
		ind++;
	}
	
	for(int i = 0;i<n;i++){
		if(temp[arr[i]-1]==0){
			temp[arr[i]-1] = 1;
		} else{
			temp[arr[i]-1] = 0;
		}
	}
	
	int i = 0;
	int j = temp.size()-1;
	while(i<=j){
		swap(temp[i],temp[j]);
		i++;
		j--;
	}
	int ans = 0;
	for(int i = 0;i<temp.size();i++){
		ans = ans*2;
		ans = ans+temp[i];
	}
	return ans;
}
