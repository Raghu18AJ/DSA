Modify Linked list
Easy
Average time to solve is 10m

Problem statement
You are given a linked list containing N nodes where each node is associated with a certain value. Return a linked list as follows: If the input linked list is 1-->2-->3-->4, then the output should be 1-->4-->2-->3. And if the input is 1-->2-->3-->4-->5, then the output should be 1-->5-->2-->4-->3.

In other words, if the original linked list is first -> second -> third -> ……….->thirdlast -> secondlast -> last, then the modified linked list would be first -> last -> second -> second_last -> ...

Note

1. All the node values are positive.

2. The size of the linked list is greater than 1.

3. The end of the linked list is represented by -1.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
2
1 2 3 4 -1
1 2 3 4 5 -1
Sample Output 1:
1 4 2 3
1 5 2 4 3
Explanation of Sample Input 1:
Test case 1:
The original Linked List  1 -> 2 -> 3 -> 4 is modified to 1 -> 4 -> 2 -> 3

Test case 2:
The original Linked List  1 -> 2 -> 3 -> 4 ->5 is modified to 1 -> 5 -> 2 ->4 ->3
Sample Input 2:
4
1 2 3 4 5 6 -1
1 -1
1 2 -1 
1 2 3 -1
Sample Output 2:
1 6 2 5 3 4 
1 
1 2 
1 3 2

cpp code:-
#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the Node class:

    class Node
    {
    public:
        int data;
        Node *next;
        Node(int data)
        {
	        this->data = data;
	        this->next = NULL;
        }
    };

*****************************************************************/

Node* modifyLL(Node* head) 
{
	// Write your code here.
    vector<int> arr;
    Node* temp = head;
    while(temp != NULL){
        arr.push_back(temp->data);
        temp = temp->next;
    }
    int i = 0;
    int j = arr.size()-1;
    Node* ans = new Node(-1);
    Node* curr = ans;
    while(i<=j){
        if(i == j){
            curr->next = new Node(arr[i]);
            curr = curr->next;
        }else{
            curr->next = new Node(arr[i]);
            curr = curr->next;
            curr->next = new Node(arr[j]);
            curr = curr->next;
        }
        
        i++;
        j--;
    }
    return ans->next;
}
