Minimum Deletion Cost to Avoid Repeating Letters
Moderate
80/80

Problem statement
Ninja has given a string 'S' of lowercase characters of size 'N'. He also has provided an array 'COST' where 'COST[i]' refers to the Cost of deleting the ‘i’th character in the string.

Ninja doesn't like a string with the same adjacent characters, so he asked you to help him transform the given string into the string with no adjacent repetitive characters by deleting some characters in it.

Cost of deleting some characters is the sum of costs of individual deletion of characters at every position. Your task is to find the minimum cost needed to transform the string with no adjacent repetitive characters.

Example:
Input: 'S' = "babbc", 'COST' = [1, 2, 3, 4, 5] 
Output: 3

By deleting the third letter 'b' with cost, 3 will transform the string into 'babc'. This is the minimum possible cost to transform the string.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= ‘T’ <= 10
2 <= 'N' <= 10^4
1 <= 'COST[i]'<= 10^4
Time Limit: 1sec
Sample Input 1 :
2
5
abaac
1 2 3 4 5
4
abcd
4 5 3 4
Sample Output 1 :
3
0
Explanation Of Sample Input 1 :
For the first test case, By deleting the third letter 'a' with cost, 3 will transform the string into ‘abac’. This is the minimum possible cost to transform the string.

For the second test case, all adjacent characters in the string are already unequal. Hence the cost will be 0.
Sample Input 2 :
2
6
pqrrss
7 2 3 4 5 6
4
xyyz
1 3 7 5
Sample Output 2 :
8
3

cpp code 
#include <bits/stdc++.h> 
int minimumCost(int n, string &s, vector<int> &cost) {
    // Write your code here.
    int ans = 0;

    int i = 0;
    while(i<n-1){
        int j = i+1;
        int count = 1;//count the number of adjacent letters int the string
        while(s[i] == s[j]){
            count++;
            j++;
        }

        int sum = 0;
        int maxi = 0;
        for(int k = i;k<count+i;k++){
            maxi = max(maxi,cost[k]);//finding the maxi element in cost array in the range
            sum += cost[k];//sum of all the elements in th cost array in the range
        }
        ans += sum-maxi; //removing the maximum element from the sum bcoz only one element will be left 
        i = j;//updating the i with j

    }
    return ans;
}
