The Hero Test-2
Moderate
80/80
Average time to solve is 30m

Problem statement
After passing hero test 1 with flying colours, now Ninja gets a different exam to get promoted to the hero class S.

Here also the pattern is the same as the previous exam, Ninja will get ‘N’ questions from 1 to ‘N’ but this time Ninja comes with a new technique to order the questions, he will solve a question after skipping ‘K’ questions (assume that after ‘N’th question he will come back to the first question) until he completes all questions.

Help Ninja by telling him the order of questions that is always a permutation of 1 to ‘N’.

For example:
If the number of questions is ‘5’ and ‘K’ = 3 
Then the order will be
 “4 3 5 2 1”

Constraints :
1 <= T <= 5
1 <= N, K <= 3000

Where ‘T’ is the number of test cases, ‘N’ is the number of questions, and ‘K’ is the number of questions that Ninja will skip after solving one question.

Time limit: 1 second.
Note:

You do not need to print anything. It has already been taken care of. Just implement the given function.
Sample Input 1:
2
6 3
4 1
Sample Output 1:
4 2 1 3 6 5
2 4 3 1
Explanation of Sample Output 1:
Test Case 1:   There are 6 questions,the  and ninja will start solving the questions as shown in image below: 4 2 1 3 6 5

Test Case 2:   There are 4 questions, and ninja will start solving the questions as shown in the image below: 2, 4, 3, 1

Sample Input 2:
2
5 4
1 10
Sample Output 2:
5 1 3 4 2
1  

cpp code:-

#include <bits/stdc++.h> 
vector<int> theOrder(int n, int k)
{
	// Write your code here.
	vector<int> arr;
	for(int i = 1;i<=n;i++){
		arr.push_back(i);
	}
	vector<int> ans;
	int i = k%n;
	int size = n;
	while(size != 0){
		ans.push_back(arr[i]);
		arr.erase(arr.begin()+i);
		size--;
		if(size>0){
			i = (i+k)%size;
		}
	}
	return ans;
}
