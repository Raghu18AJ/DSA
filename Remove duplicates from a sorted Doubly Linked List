Remove duplicates from a sorted Doubly Linked List
Easy
40/40

Problem statement

A doubly-linked list is a data structure that consists of sequentially linked nodes, and the nodes have reference to both the previous and the next nodes in the sequence of nodes.

You are given a sorted doubly linked list of size 'n'.

Remove all the duplicate nodes present in the linked list.

Example :

Input: Linked List: 1 <-> 2 <-> 2 <-> 2 <-> 3

Output: Modified Linked List: 1 <-> 2 <-> 3

Explanation: We will delete the duplicate values ‘2’ present in the linked list.

Sample Input 1 :
5
1 2 2 2 3

Sample Output 1 :
1 2 3

Explanation For Sample Input 1 :
We will delete the duplicate values ‘2’ present in the linked list.

Sample Input 2 :
4
1 2 3 4

Sample Output 2 :
1 2 3 4

Explanation For Sample Input 2 :
The list contains no duplicates, so the final list is unchanged.

Expected time complexity :
The expected time complexity is O('n').

cpp code:
/**
 * Definition of doubly linked list:
 * class Node {
 * public:
 *      int data;
 *      Node *prev;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next, Node *prev) {
 *          this->data = data;
 *          this->prev = prev;
 *          this->next = next;
 *      }
 * };
 *
 *************************************************************************/

Node * removeDuplicates(Node *head)
{
    //making nodes ans, curr, pre
    Node* ans = new Node(-1);
    Node* curr = ans;
    Node* pre = ans;

    //inserting first element to curr->next, update curr with next and pre, update pre, update head
    curr->next = new Node(head->data);
    curr = curr->next;
    curr->prev = pre;
    pre = pre->next;
    head=head->next;

    //inserting unique elements with the same way above
    while(head!=NULL){
        if(curr->data!=head->data){
            curr->next = new Node(head->data);
            curr = curr->next;
            curr->prev = pre;
            pre = pre->next;
        }
        head=head->next;
    }

    return ans->next;
    
}



Constraints :
1 <= 'n' <= 10^5
1 <= 'data' in any node <= 10^6

Time limit: 1 sec
