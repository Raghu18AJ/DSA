Strobogrammatic Number
Moderate
80/80
Average time to solve is 30m

Problem statement
Given a string ‘N’ that represents a number, you need to check if the given number is a strobogrammatic number or not.

A strobogrammatic number is a number that looks the same when rotated by 180.

In other words, a number that on rotating right side up and upside down appears the same is a strobogrammatic number.

For Example:
‘986’ is a strobogrammatic number because on rotating ‘986’ by 180, ‘986’ will be obtained.


Constraints:
1 <= T <= 50
0 <= N <= 10^5

Time limit: 1 sec
Sample Input 1:
2
191
8008
Sample Output 1:
False
True
Explanation Of Sample Input 1:
Test Case 1: On rotating ‘191’ by 180, ‘161’ will be formed. So ‘191’ is not a strobogrammatic number.

Test Case 2: On rotating ‘8008’, ‘8008’ will be obtained. So ‘8008’ is a strobogrammatic number.

Sample Input 2:
2
8888
543
Sample Output 2:
True
False

cpp code:-

#include <bits/stdc++.h> 
bool isStrobogrammatic(string &n)
{
    // Write your code here.
    unordered_map<char,char> mp;
    mp['0'] = '0';
    mp['1'] = '1';
    mp['6'] = '9';
    mp['9'] = '6';
    mp['8'] = '8';
    int i = 0;
    int j = n.length()-1;
    while(i<=j){
      if(mp[n[i]] != n[j]){
        return false;
      }
      i++;
      j--;
    }
    return true;
}
