Merge Two Sorted Linked Lists

Moderate
80/80
Average time to solve is 15m

Problem statement

You are given two sorted linked lists. You have to merge them to produce a combined sorted linked list. You need to return the head of the final linked list.

Note:

The given linked lists may or may not be null.
For example:

If the first list is: 1 -> 4 -> 5 -> NULL and the second list is: 2 -> 3 -> 5 -> NULL

The final list would be: 1 -> 2 -> 3 -> 4 -> 5 -> 5 -> NULL

Constraints:

1 <= L <= 10^5
1 ≤ data ≤ 10^6 and data != -1

Where L is the number of nodes in either of the two Linked List.

Time Limit: 1 sec 

Follow-up:

Try to solve this problem in linear time complexity and constant space complexity.

Sample Input 1:
7 8 -1
1 3 4 6 -1
Sample Output 1:
1 3 4 6 7 8 -1
Explanation of Input 1:
In this testcase, the first list is: 7 -> 8 -> NULL
The second list is: 1 -> 3 -> 4 -> 6 -> NULL
The final list would be: 1 -> 3 -> 4 -> 6 -> 7 -> 8 -> NULL

Sample Input 2:
5 -1
1 3 6 10 -1
Sample Output 2

cpp code:

#include <bits/stdc++.h>

/************************************************************

    Following is the linked list node structure.
    
    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }

        ~Node() {
            if (next != NULL) {
                delete next;
            }
        }
    };

************************************************************/

Node<int>* sortTwoLists(Node<int>* first, Node<int>* second)
{
    // Write your code here.
    vector<int> arr;
    while(first!=NULL && second!=NULL){
        if(first->data<=second->data){
            arr.push_back(first->data);
            first=first->next;
        }else{
            arr.push_back(second->data);
            second=second->next;
        }
    }
    while(first!=NULL){
        arr.push_back(first->data);
        first=first->next;
    }
    while(second!=NULL){
        arr.push_back(second->data);
        second=second->next;
    }
    Node<int>* ans = new Node<int>(-1);
    Node<int>* temp = ans;
    for(int i = 0;i<arr.size();i++){
        temp->next = new Node<int>(arr[i]);
        temp = temp->next;
    }
    return ans->next;
}

1 3 5 6 10 -1
