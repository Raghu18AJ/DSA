Minimum Steps to Halve Sum

Difficulty: Medium
Accuracy: 62.81%
Submissions: 3K+
Points: 4

Given an array arr[], find the minimum number of operations required to make the sum of its elements less than or equal to half of the original sum. In one operation, you may replace any element with half of its value (with floating-point precision).

Examples:

Input: arr[] = [8, 6, 2]
Output: 3
Explanation: Initial sum = (8 + 6 + 2) = 16, half = 8
Halve 8 → arr[] = [4, 6, 2], sum = 12 (still 12 > 8)
Halve 6 → arr[] = [4, 3, 2], sum = 9 (still 9 > 8)
Halve 2 → arr[] = [4, 3, 1], sum = 8. 

Input: arr[] = [9, 1, 2]
Output: 2
Explanation: Initial sum = 12, half = 6
Halve 9 → arr[] = [4.5, 1, 2], sum = 7.5 (still > 6)
Halve 4.5 → arr[] = [2.25, 1, 2], sum = 5.25 ≤ 6

Constraints:

1 ≤ arr.size() ≤ 105
0 ≤ arr[i] ≤ 104

cpp code:

class Solution {
  public:
    
    int minOperations(vector<int>& arr) {
        
        priority_queue<double> pq;
        double originalSum = 0;
        
        for (int num : arr) {
            pq.push(num);
            originalSum += num;
        }

        double target = originalSum / 2.0;
        double currSum = originalSum;
        int operations = 0;

        while (currSum > target) {
            double top = pq.top();
            pq.pop();
            double half = top / 2.0;
            currSum -= half;
            pq.push(half);
            operations++;
        }

        return operations;
        
    }
};
