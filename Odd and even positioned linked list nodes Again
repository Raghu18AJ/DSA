Odd and even positioned linked list nodes

Easy
40/40
Average time to solve is 10m

Problem statement

You are given a singly linked list ‘HEAD’ consisting of ‘N’ nodes. The task is to group all the odd nodes together, followed by the even nodes, maintaining the relative order of nodes given in the input. Note that we are talking about the node’s positions and not the value stored in the node. Try to write an in-place algorithm (i.e., without using any extra space) to solve this problem.

Example:

Given linked list: ‘2 => 1 => 3 => 4 => 6 => 5’

While maintaining the relative order of nodes as it is in the input, Nodes at odd positions are (2, 3, 6), and nodes at evens position are (1, 4, 5).

Modified linked list: ‘2 => 3 => 6 => 1 => 4 => 5’

Note:

1. Consider that the first node is odd, the second is even, and so on.

Constraints:

1 <= T <= 100
1 <= N <= 10^3
-10^6 <= Node value <= 10^6 (Node Value != -1)  

Time limit: 1 second

Sample input 1:
2 
1 2 3 -4 5 6 -1    
-3 -1 
Sample output 1:
1 3 5 2 -4 6 -1
-3 -1 

Explanation of sample input 1:

Test Case 1:

Given linked list: ‘1 => 2 => 3 => -4 => 5 => 6’
While maintaining the relative order of nodes as it is in the input, Nodes at odd positions are (1, 3, 5), and nodes at evens position are (2, -4, 6). 
Modified linked list: ‘1 => 3 => 5 => 2 => -4 => 6’

Test Case 2:

Input linked list: ‘-3’
The linked list contains only one node.
Modified linked list: ‘-3’

Sample input 2:
2
3 5 -2 1 7 -1
-2 3 5 3 -1  
Sample output 2:
3 -2 7 5 1 -1
-2 5 3 3 -1

cpp code:

#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the Node class:

        class Node 
        {
        public:
            int value;
            Node *next;
            Node(int value) : value(value), next(nullptr){};
        };

*****************************************************************/

Node *oddEvenLinkedList(Node *head) {
    // Write your code here.
    Node* odd = new Node(-1);
    Node* even = new Node(-1);
    Node* temp1 = odd;
    Node* temp2 = even;
    int element = 1;
    while(head!=NULL){
        if(element&1){
            temp1->next = new Node(head->value);
            temp1 = temp1->next;
        }else{
            temp2->next = new Node(head->value);
            temp2 = temp2->next;
        }
        head=head->next;
        element++;
    }
    temp1->next = even->next;
    return odd->next;

}
